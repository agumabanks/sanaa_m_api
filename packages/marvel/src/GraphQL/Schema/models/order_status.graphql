extend type Query {
    orderStatuses(
        text: String @where(operator: "like", key: "name")
        language: String @eq
        orderBy: _
            @orderBy(columns: ["updated_at", "created_at", "serial", "name"])
    ): [OrderStatus!]! @paginate(defaultCount: 15)
    orderStatus(slug: String @eq, language: String @eq): OrderStatus @find
}

type OrderStatus {
    id: ID!
    slug: String!
    name: String!
    language: String
    translated_languages: [String]
    color: String
    serial: Int!
    created_at: DateTime
    updated_at: DateTime
}

input CreateOrderStatusInput {
    name: String!
        @rules(
            apply: ["unique:order_status,name"]
            messages: {
                unique: "Sorry! this name has been already taken. It should be unique"
            }
        )
    color: String!
    language: String!
    slug: String
    serial: Int!
        # @rules(
        #     apply: ["unique:order_status,serial"]
        #     messages: { unique: "Sorry! this serial has been already taken." }
        # )
}

input UpdateOrderStatusInput {
    id: ID! @rules(apply: ["required"])
    name: String!
    language: String
    color: String!
    serial: Int!
}

extend type Mutation {
    createOrderStatus(input: CreateOrderStatusInput! @spread): OrderStatus
        @create
        @can(ability: "super_admin")
    updateOrderStatus(input: UpdateOrderStatusInput! @spread): OrderStatus
        @update
        @can(ability: "super_admin")
    deleteOrderStatus(id: ID!): OrderStatus @delete @can(ability: "super_admin")
}
