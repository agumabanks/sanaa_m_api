extend type Query {
    orders(
        tracking_number: String @where(operator: "LIKE")
        orderBy: String
        sortedBy: String
        customer_id: ID @eq
        shop_id: ID @eq
    ): [Order!]!
        @paginate(
            builder: "Marvel\\GraphQL\\Queries\\OrderQuery@fetchOrders"
            defaultCount: 10
        )
    order(id: ID @eq, tracking_number: String @eq): Order
        @find
}

type Order {
    id: ID!
    tracking_number: String!
    customer_id: ID
    customer_contact: String!
    customer: User @belongsTo
    language: String
    refund: Refund @hasOne
    wallet_point: WalletPoint @hasOne
    parent_order: Order @belongsTo
    children: [Order] @hasMany
    status: OrderStatus! @belongsTo
    amount: Float!
    sales_tax: Float!
    total: Float!
    paid_total: Float!
    payment_id: String
    payment_gateway: PaymentGatewayType
    coupon: Coupon @belongsTo
    shop: Shop @belongsTo
    discount: Float
    delivery_fee: Float
    delivery_time: String
    products: [Product] @belongsToMany
    created_at: DateTime
    updated_at: DateTime
    billing_address: UserAddress
    shipping_address: UserAddress
}

type WalletPoint {
    id: ID!
    amount: Float
}

input SyncProductOrderBelongsToMany {
    sync: [ConnectProductOrderPivot!]
}

input ConnectOrderStatusBelongsTo {
    connect: ID! @rules(apply: ["exists:order_status,id"])
}

input ConnectCustomerBelongsTo {
    connect: ID! @rules(apply: ["exists:users,id"])
}
input ConnectCouponBelongsTo {
    connect: ID! @rules(apply: ["exists:coupons,id"])
}

input UpdateOrderInput {
    id: ID!
    status: String!
    products: SyncProductOrderBelongsToMany
    language: String
    coupon: ConnectCouponBelongsTo
    shop_id: ID @rules(apply: ["exists:shops,id"])
    delivery_time: String
    billing_address: UserAddressInput
    shipping_address: UserAddressInput
}

input CardInput {
    number: String!
    expiryMonth: String!
    expiryYear: String!
    cvv: String!
    email: String
}

input CreateOrderInput {
    customer_contact: String! @rules(apply: ["required"])
    status: String! @rules(apply: ["required"])
    products: [ConnectProductOrderPivot!]! @rules(apply: ["required"])
    amount: Float! @rules(apply: ["required"])
    sales_tax: Float!
    total: Float! @rules(apply: ["required"])
    paid_total: Float! @rules(apply: ["required"])
    payment_id: String
    payment_gateway: PaymentGatewayType! @rules(apply: ["required"])
    coupon_id: ID
    shop_id: ID
    customer_id: ID
    discount: Float
    use_wallet_points: Boolean
    delivery_fee: Float
    delivery_time: String
    card: CardInput
    token: String
    billing_address: UserAddressInput!
    shipping_address: UserAddressInput!
    language: String
}

input generateOrderExportUrlInput {
    shop_id: ID
        @rules(
            apply: []
            messages: { exists: "Sorry! The file doesn't exists." }
        )
}

input TranslatedLanguage {
    subtotal: String
    discount: String
    tax: String
    delivery_fee: String
    total: String
    products: String
    quantity: String
    invoice_no: String
    date: String
}

input GenerateInvoiceDownloadUrlInput {
    order_id: String!
    translated_languages: TranslatedLanguage
    is_rtl: Boolean!
    language: String!
}

extend type Mutation {
    deleteOrder(id: ID!): Order @delete @can(ability: "super_admin")
    createOrder(input: CreateOrderInput! @spread): Order
        @field(resolver: "OrderMutator@store")
    updateOrder(input: UpdateOrderInput! @spread): Order
        @field(resolver: "OrderMutator@update")
    generateOrderExportUrl(input: generateOrderExportUrlInput! @spread): String
        @field(resolver: "AuthMutator@generateOrderExportUrl")
    generateInvoiceDownloadUrl(input: GenerateInvoiceDownloadUrlInput! @spread): String
        @field(resolver: "OrderMutator@generateInvoiceDownloadUrl")
}
